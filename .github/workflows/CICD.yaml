name: CICD PIPELINE
# CICD PIPELINE : LINT,SECURITY , REVIEW , Build, Push Docker Image, and Deploy to Azure
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_PROD_WEBAPP_NAME: ${{ secrets.AZURE_PROD_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbqa black flake8 isort sqlfluff
      - name: Run linters
        run: |
          black src/ tests/
          isort src/ tests/
          flake8 src/ tests/
          nbqa black src/ tests/
          nbqa flake8 src/ tests/
          nbqa isort src/ tests/
          sqlfluff lint src/ tests/

  tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry poetry-plugin-export
          poetry export --without-hashes -f requirements.txt -o requirements.txt
          pip install -r requirements.txt
          pip install pytest-cov
      - name: Add temp public/private key for tests
        run: |
          bash secrets/startup.sh
      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  security:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit
        run: |
          bandit -r src/ -f json -o bandit.json

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      - name: Generate Sonar Scan report
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          # Set up variables
          SONAR_API="https://sonarcloud.io/api"

          # Ensure jq is available
          sudo apt-get update && sudo apt-get install -y jq

          # Fetch issues
          curl -s -u "${SONAR_TOKEN}:" \
              "${SONAR_API}/issues/search?componentKeys=${PROJECT_KEY}&ps=500" \
              -o "issues.json"

          # Fetch quality gate status
          curl -s -u "${SONAR_TOKEN}:" \
              "${SONAR_API}/qualitygates/project_status?projectKey=${PROJECT_KEY}" \
              -o "quality_gate.json"

          # Fetch key metrics
          curl -s -u "${SONAR_TOKEN}:" \
              "${SONAR_API}/measures/component?component=${PROJECT_KEY}&metricKeys=coverage,line_coverage,duplicated_lines_density,ncloc,complexity" \
              -o "measures.json"

          # Merge all into a single report
          jq -s '{
            timestamp: now,
            issues: .[0].issues,
            quality_gate: .[1].projectStatus,
            metrics: .[2].component.measures
          }' "issues.json" "quality_gate.json" "measures.json" > "sonar.json"

      - name: Upload sonar.json report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-json-report
          path: sonar.json
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit.json


  ai-review:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Ensure ai-review.yaml exists
        run: |
          if [ ! -f ai-review.yaml ]; then
            cat <<EOF > ai-review.yaml
          ${{ secrets.AI_REVIEW_YAML }}
          EOF
          echo "Injected ai-review.yaml from secret."
          else
            echo "ai-review.yaml already exists. Skipping injection."
          fi
      - name: Run AI Comment Review Agent
        uses: Manav-Khandurie/agents/code-comment-review-agent@code-comment-review-agent-v1.0.1
        with:
          config-path: "./ai-comment-review.yaml"
          score-threshold: 85
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Run AI Code Review Agent
        uses: Manav-Khandurie/agents/code-review-agent@code-review-agent-v1.0.4 # Stable tested 1.0.3
        with:
          config-path: "ai-review.yaml"
          score-threshold: 85
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Upload code_review_result.json report
        uses: actions/upload-artifact@v4
        with:
          name: code-review-report
          path: code_review_result.json
      
      - name: Upload code_comment_review_result.json report
        uses: actions/upload-artifact@v4
        with:
          name: code-comment-review-report
          path: code_comment_review_result.json

  build-secure-push:
    runs-on: ubuntu-latest
    needs: ai-review
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/*/}
          SHORT_SHA=$(git rev-parse --short HEAD)
          if [[ "$VERSION" == "main" ]]; then
            VERSION="dev-${SHORT_SHA}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} .

      - name: Docker image tag latest
        run: |
          docker tag ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}"
          format: "sarif"
          output: "trivy-results.sarif"
        env:
          TRIVY_IMAGE: "docker://${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
  deploy-to-azure-uat:
    runs-on: ubuntu-latest
    needs: build-secure-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Azure CLI version
        run: az --version

      - name: Deploy Docker image from DockerHub to Azure Web App (UAT)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
  manual-approval:
    runs-on: ubuntu-latest
    needs: deploy-to-azure-uat
    environment:
      name: prod # 👈 Set this in GitHub repo settings with required reviewers
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Wait for manual approval
        run: echo "✅ Approved manually via environment reviewers"

  deploy-to-azure-prod:
    runs-on: ubuntu-latest
    needs: manual-approval

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Azure CLI version
        run: az --version

      - name: Deploy Docker image from DockerHub to Azure Web App (PROD)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_PROD_WEBAPP_NAME }}
          images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
  
  issue-agent:
    name: issue-agent
    runs-on: ubuntu-latest
    needs: deploy-to-azure-prod
    steps:
      - uses: actions/checkout@v3
        with:
          path: codebase

      - name: Create /data directory
        run: mkdir -p data

      - name: Download comment review artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: code-comment-review-report
          path: data/

      - name: Download code review artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: code-review-report
          path: data/
      
      - name: Download sonar review artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: sonar-json-report
          path: data/
      
      - name: Run Issue Agent
        uses: Manav-Khandurie/agents/issue-agent@issue-agent-v2.0.0
        with:
          src: "./data"
          provider: "openai"
          model_name: "gpt-4o-mini"
          api_key: ${{ secrets.OPENAI_API_KEY }}
          github_token: ${{ secrets.TOKEN_GITHUB_NEW }}
          github_repo: ${{ github.repository }}
  
  notify:
    runs-on: ubuntu-latest
    if: always()
    needs:
      [
        lint,
        tests,
        security,
        ai-review,
        build-secure-push,
        deploy-to-azure-uat,
        deploy-to-azure-prod,
        issue-agent
      ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate CI/CD Summary Email
        id: generate_summary
        shell: bash
        env:
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          COMMIT_SHA: ${{ github.sha }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          BRANCH: ${{ github.ref_name }}
          AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
          AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
        run: |
          generate_row() {
            local stage="$1"
            local status="$2"
            local message="$3"
            local color=""
            local emoji=""
            case "$status" in
              success) color="#d4edda"; emoji="✅" ;;
              failure) color="#f8d7da"; emoji="❌" ;;
              cancelled) color="#fff3cd"; emoji="⚠️" ;;
              *) color="#ffffff"; emoji="❔" ;;
            esac
            echo "<tr style='background-color:$color'>
              <td>$stage</td>
              <td>$emoji $status</td>
              <td>$message</td>
            </tr>" >> rows.html
          }
          > rows.html
          generate_row "🧹 Lint" "${{ needs.lint.result }}" "Black, Ruff, Flake8"
          generate_row "🧪 Tests" "${{ needs.tests.result }}" "Pytest + Coverage"
          generate_row "🛡️ Security" "${{ needs.security.result }}" "Bandit, Trivy, Sonar"
          generate_row "🧠 AI Review" "${{ needs.ai-review.result }}" "LLM Code QA"
          generate_row "🐳 Build & Push" "${{ needs.build-secure-push.result }}" "Docker Build + Secure Push"
          generate_row "☁️ Deploy to UAT" "${{ needs.deploy-to-azure-uat.result }}" "Azure WebApp Deployment - UAT"
          generate_row "👥 Deploy to PROD" "${{ needs.deploy-to-azure-prod.result }}" "Azure WebApp Deployment - PROD"
          generate_row "🗞️ Issue Agnet Execution" "${{ needs.issue-agent.result }}" "Issue Agnet Execution"
          cat <<EOF > summary.html
          <html>
          <body style="font-family:Arial, sans-serif;">
            <h2>🚀 CI/CD Pipeline Report</h2>
            <h3>📄 Metadata</h3>
            <ul>
              <li><strong>Repository:</strong> <a href="https://github.com/$REPO">$REPO</a></li>
              <li><strong>Run ID:</strong> <a href="https://github.com/$REPO/actions/runs/$RUN_ID">$RUN_ID</a></li>
              <li><strong>Commit:</strong> <code>$COMMIT_SHA</code></li>
              <li><strong>Commit Message:</strong> $COMMIT_MESSAGE</li>
              <li><strong>Branch:</strong> $BRANCH</li>
              <li><strong>Author:</strong> $AUTHOR_NAME ($AUTHOR_EMAIL)</li>
            </ul>
            <h3>📊 Stage Results</h3>
            <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse; width: 100%;">
              <thead>
                <tr style="background-color: #f0f0f0;">
                  <th>Stage</th>
                  <th>Status</th>
                  <th>Message</th>
                </tr>
              </thead>
              <tbody>
          $(cat rows.html)
              </tbody>
            </table>
          </body>
          </html>
          EOF
      - name: Send SES Email
        env:
          SES_FROM_EMAIL: ${{ secrets.SES_FROM_EMAIL }}
          SES_TO_EMAILS: ${{ secrets.SES_TO_EMAILS }}
        run: |
          IFS=',' read -ra ADDR <<< "$SES_TO_EMAILS"
          TO_JSON=$(printf '"%s",' "${ADDR[@]}")
          TO_JSON="[${TO_JSON%,}]"
          # Escape summary.html into a JSON-safe format and write to json_body.json
          HTML_CONTENT=$(cat summary.html | sed -e 's/"/\\"/g' | tr '\n' ' ')
          cat <<EOF > email_payload.json
          {
            "Source": "$SES_FROM_EMAIL",
            "Destination": {
              "ToAddresses": $TO_JSON
            },
            "Message": {
              "Subject": {
                "Data": "CI/CD Pipeline Report",
                "Charset": "UTF-8"
              },
              "Body": {
                "Html": {
                  "Data": "$HTML_CONTENT",
                  "Charset": "UTF-8"
                }
              }
            }
          }
          EOF
          aws ses send-email --cli-input-json file://email_payload.json
